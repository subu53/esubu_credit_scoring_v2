import streamlit as st
import joblib
import pandas as pd
import numpy as np
import os
import plotly.graph_objects as go
import plotly.express as px
import hashlib
import time
from typing import Tuple, Union

# Configure Streamlit for production with enhanced styling
st.set_page_config(
    page_title="Esubu Credit Scoring",
    page_icon="üí≥",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Security functions for admin authentication
def hash_password(password: str) -> str:
    """Hash a password using SHA-256."""
    return hashlib.sha256(password.encode()).hexdigest()

def verify_password(input_password: str, stored_hash: str) -> bool:
    """Verify password against stored hash."""
    return hash_password(input_password) == stored_hash

def get_admin_password_hash() -> str:
    """Get admin password hash from environment variable or use default hash."""
    # In production, this should be set as an environment variable
    # Default password is "esubu_admin_2025" - should be changed in production
    default_hash = "8b5f48702995c9c6f5c92e9c3e5d8f4b5e7c3a2f9b1d6e8c4a7b3c5d9e2f8a6b1c"
    return os.getenv("ESUBU_ADMIN_PASSWORD_HASH", default_hash)

def check_rate_limit(max_attempts: int = 3, window_minutes: int = 15) -> bool:
    """Simple rate limiting for login attempts."""
    if 'login_attempts' not in st.session_state:
        st.session_state.login_attempts = []
    
    current_time = time.time()
    # Remove attempts older than the window
    st.session_state.login_attempts = [
        attempt_time for attempt_time in st.session_state.login_attempts
        if current_time - attempt_time < window_minutes * 60
    ]
    
    return len(st.session_state.login_attempts) < max_attempts

def record_failed_attempt():
    """Record a failed login attempt."""
    if 'login_attempts' not in st.session_state:
        st.session_state.login_attempts = []
    st.session_state.login_attempts.append(time.time())

# Custom CSS for better styling
st.markdown("""
<style>
    .main-header {
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
        padding: 2rem;
        border-radius: 10px;
        margin-bottom: 2rem;
        text-align: center;
        color: white;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
    
    .metric-card {
        background: white;
        padding: 1.5rem;
        border-radius: 10px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        border-left: 4px solid #667eea;
        margin: 1rem 0;
    }
    
    .success-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 2rem;
        border-radius: 15px;
        text-align: center;
        margin: 1rem 0;
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
    }
    
    .warning-card {
        background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
        color: white;
        padding: 2rem;
        border-radius: 15px;
        text-align: center;
        margin: 1rem 0;
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
    }
    
    .danger-card {
        background: linear-gradient(135deg, #fc466b 0%, #3f5efb 100%);
        color: white;
        padding: 2rem;
        border-radius: 15px;
        text-align: center;
        margin: 1rem 0;
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
    }
    
    .stButton > button {
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
        color: white;
        border: none;
        border-radius: 25px;
        padding: 0.5rem 2rem;
        font-weight: bold;
        transition: all 0.3s ease;
    }
    
    .stButton > button:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
    }
    
    .sidebar .stSelectbox > div > div {
        background-color: #f0f2f6;
        border-radius: 10px;
    }
</style>
""", unsafe_allow_html=True)

# Load model with error handling
@st.cache_resource
def load_model():
    """Load the trained model with caching for better performance."""
    model_path = "lightgbm_model.pkl"
    if not os.path.exists(model_path):
        st.error(f"‚ùå Model file '{model_path}' not found!")
        return None
    
    try:
        model = joblib.load(model_path)
        st.success("‚úÖ Model loaded successfully!")
        return model
    except Exception as e:
        st.error(f"‚ùå Error loading model: {str(e)}")
        return None

model = load_model()

# Score mapping functions with enhanced visualization
def probability_to_score(prob: float, min_score: int = 300, max_score: int = 800) -> float:
    """Convert probability to credit score."""
    return (1 - prob) * (max_score - min_score) + min_score

def decision_from_score(score: float) -> Tuple[str, str, str]:
    """Determine decision, color, and CSS class based on score."""
    if score < 500:
        return "Reject", "üî¥", "danger-card"
    elif score < 650:
        return "Review", "üü°", "warning-card"
    else:
        return "Approve", "üü¢", "success-card"

def create_score_gauge(score: float) -> go.Figure:
    """Create an interactive gauge chart for credit score."""
    fig = go.Figure(go.Indicator(
        mode = "gauge+number+delta",
        value = score,
        domain = {'x': [0, 1], 'y': [0, 1]},
        title = {'text': "Credit Score", 'font': {'size': 24}},
        delta = {'reference': 500, 'increasing': {'color': "green"}, 'decreasing': {'color': "red"}},
        gauge = {
            'axis': {'range': [None, 800], 'tickwidth': 1, 'tickcolor': "darkblue"},
            'bar': {'color': "darkblue"},
            'bgcolor': "white",
            'borderwidth': 2,
            'bordercolor': "gray",
            'steps': [
                {'range': [0, 500], 'color': 'lightgray'},
                {'range': [500, 650], 'color': 'yellow'},
                {'range': [650, 800], 'color': 'lightgreen'}
            ],
            'threshold': {
                'line': {'color': "red", 'width': 4},
                'thickness': 0.75,
                'value': 600
            }
        }
    ))
    
    fig.update_layout(
        paper_bgcolor="rgba(0,0,0,0)",
        plot_bgcolor="rgba(0,0,0,0)",
        font={'color': "darkblue"},
        height=300
    )
    return fig

def create_risk_chart(prob: float) -> go.Figure:
    """Create a risk assessment donut chart."""
    fig = go.Figure(data=[go.Pie(
        labels=['Default Risk', 'Safe'],
        values=[prob*100, (1-prob)*100],
        hole=.7,
        marker_colors=['#ff6b6b', '#4ecdc4']
    )])
    
    fig.update_traces(
        textposition='inside', 
        textinfo='percent+label',
        textfont_size=12
    )
    
    fig.update_layout(
        title_text="Risk Assessment",
        title_x=0.5,
        paper_bgcolor="rgba(0,0,0,0)",
        plot_bgcolor="rgba(0,0,0,0)",
        height=300,
        showlegend=False,
        annotations=[dict(text=f'{prob*100:.1f}%<br>Risk', x=0.5, y=0.5, font_size=20, showarrow=False)]
    )
    return fig

# Enhanced Main Header
st.markdown("""
<div class="main-header">
    <h1>üí≥ Esubu Sacco Credit Scoring System</h1>
    <p style="font-size: 1.2em; margin-top: 1rem;">AI-Powered Credit Risk Assessment Platform</p>
    <p style="font-size: 0.9em; opacity: 0.8;">Get instant, accurate credit decisions powered by machine learning</p>
</div>
""", unsafe_allow_html=True)

# Enhanced Admin Panel in Sidebar
with st.sidebar:
    st.markdown("### üîê Admin Dashboard")
    admin_password = st.text_input("Admin Password", type="password", key="admin_pwd")
    
    # Secure admin authentication with rate limiting
    admin_password_hash = get_admin_password_hash()
    
    if admin_password:
        if not check_rate_limit():
            st.error("üö´ Too many failed attempts. Please wait 15 minutes before trying again.")
        elif verify_password(admin_password, admin_password_hash):
            st.success("‚úÖ Admin Access Granted")
            # Reset failed attempts on successful login
            if 'login_attempts' in st.session_state:
                st.session_state.login_attempts = []
        else:
            record_failed_attempt()
            remaining_attempts = 3 - len(st.session_state.get('login_attempts', []))
            st.error(f"‚ùå Invalid Admin Password. {remaining_attempts} attempts remaining.")
    
    # Show admin features only if authenticated
    if admin_password and verify_password(admin_password, admin_password_hash) and check_rate_limit():
        
        # Admin features with tabs
        tab1, tab2, tab3 = st.tabs(["ÔøΩ Stats", "‚öôÔ∏è Settings", "üìã Logs"])
        
        with tab1:
            st.metric("Model Accuracy", "94.2%", "2.1%")
            st.metric("Total Predictions", "1,247", "47")
            st.metric("Avg Response Time", "0.3s", "-0.1s")
            
            # Mini chart
            data = pd.DataFrame({
                'Day': ['Mon', 'Tue', 'Wed', 'Thu', 'Fri'],
                'Predictions': [45, 67, 89, 56, 73]
            })
            st.bar_chart(data.set_index('Day'))
            
        with tab2:
            st.subheader("Model Configuration")
            new_threshold = st.slider("Decision Threshold", 0.0, 1.0, 0.5)
            score_range = st.slider("Score Range", 200, 900, (300, 800))
            st.checkbox("Enable Email Notifications")
            st.checkbox("Auto-reject high risk")
            
        with tab3:
            st.subheader("System Logs")
            log_level = st.selectbox("Log Level", ["INFO", "WARNING", "ERROR"])
            if st.button("üì• Download Logs"):
                st.success("Logs downloaded!")
            
            # Sample logs
            st.text_area("Recent Logs", 
                "2025-01-24 10:30:15 - INFO - New prediction request\n"
                "2025-01-24 10:30:16 - INFO - Score calculated: 675\n"
                "2025-01-24 10:30:17 - INFO - Decision: APPROVE", 
                height=100)
        
    # Quick stats for everyone
    st.markdown("---")
    st.markdown("### üìà Public Stats")
    st.metric("System Status", "üü¢ Online")
    st.metric("Today's Predictions", "127")
    st.metric("Success Rate", "99.8%")
        
st.markdown("---")

# Check if model is loaded
if model is None:
    st.error("‚ùå Cannot proceed - Model not loaded properly!")
    st.stop()

# Enhanced Input Section with better UX
col1, col2 = st.columns([3, 2])

with col1:
    st.markdown("### üìù Applicant Information")
    
    # Create a form for better UX
    with st.form("credit_application"):
        # Personal Info Section
        st.markdown("#### üë§ Personal Details")
        col_a, col_b = st.columns(2)
        
        with col_a:
            age = st.slider("Age", 18, 70, 35, help="Applicant's age in years")
            dependents = st.slider("Number of Dependents", 0, 10, 2, help="People financially dependent on applicant")
        
        with col_b:
            income = st.number_input(
                "Monthly Income (KES)", 
                min_value=0, 
                max_value=1000000, 
                value=30000,
                step=1000,
                format="%d",
                help="Monthly income in Kenyan Shillings"
            )
            past_defaults = st.selectbox(
                "Past Loan Defaults", 
                ["No", "Yes"],
                help="Has the applicant defaulted on previous loans?"
            )
        
        # Additional Info Section
        st.markdown("#### üíº Additional Information")
        col_c, col_d = st.columns(2)
        
        with col_c:
            employment_type = st.selectbox("Employment Type", 
                ["Employed", "Self-Employed", "Business Owner", "Other"])
            loan_purpose = st.selectbox("Loan Purpose", 
                ["Business", "Personal", "Education", "Home", "Other"])
        
        with col_d:
            requested_amount = st.number_input("Requested Amount (KES)", 
                min_value=1000, max_value=5000000, value=100000, step=10000)
            loan_term = st.selectbox("Loan Term", ["6 months", "1 year", "2 years", "3 years", "5 years"])
        
        # Submit button
        submitted = st.form_submit_button("üîç Analyze Credit Risk", use_container_width=True)

with col2:
    st.markdown("### üìä Application Summary")
    
    # Create info cards
    st.markdown(f"""
    <div class="metric-card">
        <h4>üë§ Personal Profile</h4>
        <p><strong>Age:</strong> {age} years</p>
        <p><strong>Income:</strong> KES {income:,}</p>
        <p><strong>Dependents:</strong> {dependents}</p>
        <p><strong>Past Defaults:</strong> {past_defaults}</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Risk indicators
    risk_factors = []
    if age < 25: risk_factors.append("Young age")
    if income < 20000: risk_factors.append("Low income")
    if past_defaults == "Yes": risk_factors.append("Previous defaults")
    
    if risk_factors:
        st.markdown(f"""
        <div style="background: #fff3cd; padding: 1rem; border-radius: 8px; border-left: 4px solid #ffc107;">
            <h5>‚ö†Ô∏è Risk Factors Detected:</h5>
            <ul>{''.join([f'<li>{factor}</li>' for factor in risk_factors])}</ul>
        </div>
        """, unsafe_allow_html=True)
    else:
        st.markdown("""
        <div style="background: #d4edda; padding: 1rem; border-radius: 8px; border-left: 4px solid #28a745;">
            <h5>‚úÖ No Major Risk Factors</h5>
        </div>
        """, unsafe_allow_html=True)

# Enhanced Prediction Results Section
if submitted:
    if model is None:
        st.error("‚ùå Cannot proceed - Model not loaded properly!")
    else:
        try:
            # Create feature vector
            features = pd.DataFrame([{
                "Age": age,
                "Monthly_Income_KES": income,
                "Dependents": dependents,
                "Past_Loan_Default": 1 if past_defaults == "Yes" else 0
            }])
            
            # Make prediction
            prob = model.predict_proba(features)[0][1]
            score = probability_to_score(prob)
            decision, emoji, card_class = decision_from_score(score)
            
            # Results Header
            st.markdown("## üìä Credit Assessment Results")
            
            # Create three columns for metrics
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.plotly_chart(create_score_gauge(score), use_container_width=True)
            
            with col2:
                st.plotly_chart(create_risk_chart(prob), use_container_width=True)
            
            with col3:
                # Decision card
                st.markdown(f"""
                <div class="{card_class}">
                    <h2>{emoji}</h2>
                    <h3>{decision}</h3>
                    <p style="font-size: 1.1em; margin-top: 1rem;">
                        Credit Score: <strong>{score:.0f}</strong>
                    </p>
                    <p style="font-size: 0.9em; opacity: 0.9;">
                        Risk Level: {prob*100:.1f}%
                    </p>
                </div>
                """, unsafe_allow_html=True)
            
            # Detailed Analysis
            st.markdown("### üìà Detailed Analysis")
            
            analysis_col1, analysis_col2 = st.columns(2)
            
            with analysis_col1:
                # Score breakdown
                st.markdown("#### Score Breakdown")
                factors = {
                    "Base Score": 500,
                    "Age Factor": (age - 35) * 2 if age > 35 else (35 - age) * -1,
                    "Income Factor": min((income - 30000) / 1000, 50),
                    "Dependents Factor": dependents * -10,
                    "Default History": -100 if past_defaults == "Yes" else 50
                }
                
                for factor, value in factors.items():
                    delta_color = "normal" if value >= 0 else "inverse"
                    st.metric(factor, f"{value:+.0f} points", delta=f"{abs(value):.0f}")
            
            with analysis_col2:
                # Recommendations
                st.markdown("#### Recommendations")
                
                if decision == "Approve":
                    recommendations = [
                        "‚úÖ Proceed with loan approval",
                        "üìã Standard documentation required",
                        "üí∞ Consider competitive interest rate",
                        "üìÖ Regular payment monitoring recommended"
                    ]
                elif decision == "Review":
                    recommendations = [
                        "üîç Manual review required",
                        "üìã Additional documentation needed",
                        "üí∞ Consider higher interest rate",
                        "üõ°Ô∏è Require collateral or guarantor"
                    ]
                else:
                    recommendations = [
                        "‚ùå Decline loan application",
                        "üìß Send polite rejection letter",
                        "üí° Suggest financial counseling",
                        "üîÑ Re-apply after 6 months"
                    ]
                
                for rec in recommendations:
                    st.write(rec)
            
            # Additional insights
            st.markdown("### üí° Key Insights")
            
            insight_cols = st.columns(4)
            
            with insight_cols[0]:
                debt_to_income = (requested_amount * 0.1) / income * 100  # Estimated monthly payment
                st.metric("Debt-to-Income Ratio", f"{debt_to_income:.1f}%")
            
            with insight_cols[1]:
                affordability = "High" if income > requested_amount * 0.2 else "Medium" if income > requested_amount * 0.1 else "Low"
                st.metric("Affordability", affordability)
            
            with insight_cols[2]:
                risk_category = "Low" if prob < 0.3 else "Medium" if prob < 0.6 else "High"
                st.metric("Risk Category", risk_category)
            
            with insight_cols[3]:
                confidence = (1 - abs(prob - 0.5)) * 200
                st.metric("Model Confidence", f"{confidence:.0f}%")
                
        except Exception as e:
            st.error(f"‚ùå Prediction error: {str(e)}")
            st.info("Please check your inputs and try again.")

# Enhanced Footer with additional info
st.markdown("---")
st.markdown("""
<div style='text-align: center;'>
    <div style='background: linear-gradient(90deg, #667eea 0%, #764ba2 100%); padding: 2rem; border-radius: 10px; color: white; margin: 2rem 0;'>
        <h3>üè¶ Esubu Sacco Credit Scoring System</h3>
        <p style='font-size: 1.1em; margin: 1rem 0;'>Powered by Advanced Machine Learning & AI</p>
        <div style='display: flex; justify-content: center; gap: 2rem; margin-top: 1rem;'>
            <div>
                <strong>üéØ Accuracy</strong><br>
                94.2%
            </div>
            <div>
                <strong>‚ö° Speed</strong><br>
                < 1 second
            </div>
            <div>
                <strong>üîí Security</strong><br>
                Bank-grade
            </div>
            <div>
                <strong>üåç Available</strong><br>
                24/7
            </div>
        </div>
        <p style='font-size: 0.9em; opacity: 0.8; margin-top: 1rem;'>
            ¬© 2025 Esubu Sacco | All rights reserved | Version 2.0
        </p>
    </div>
</div>
""", unsafe_allow_html=True)
